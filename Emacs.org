#+TITLE: Emacs  configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Introduction
This is my Emacs configuration. This is a growing document that hopefully will change a lot over time. The majority of this configuration is inspired from the excellent Emacs tutorials from [[https://odysee.com/@SystemCrafters:e][David Wilson]], [[https://cestlaz.github.io/stories/emacs/][Zamansky]], and things things that I found onine. My initial idea was to have a very custimized Emacs experience configuration and this is the result. In the future I would like to _minimize_ this configuration so that I can use emacs as a more lightweight and fast editor. 

The following variables are used to tweak some of the configuration pieces. These set the font size for my system

#+begin_src emacs-lisp
  
  ;; Define a variable that sets the font size for the system
  (defvar d13353/default-font-size 160)
  (defvar d13353/default-variable-font-size 200)
  
#+end_src

* Startup Performance

#+begin_src emacs-lisp

  (defun efs/display-startup-time ()
    (message " Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Package System Setup

To easily install packages one different systems we use the  ~use-package~ package. This helps with the installation of new packages and the readability of the init file.

#+begin_src emacs-lisp
                                          ;
  ;; Initialize package sources
  (require 'package)
  
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  
  ;; Bootstrap 'use-package' 
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  
  (require 'use-package)
  (setq use-package-always-ensure t)
  
#+end_src

** Package System Setup

The =auto-package-update= package helps to keep our Emacs packages up to date. It will prompt you after a certain number of days either at startup or at a specific time of day to remind you update your packages.

You can also simply use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 3)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean

In order to keep the folders where emacs edits files clean, we can use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package. This package knows about build in emacs features as well as those from community packages so it can be much easier than setting these variables oneself.
!! LETS COME BACK TO THIS
#+begin_src emacs-lisp

  ;;  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  ;; (setq auto-save-file-name-transforms
  ;;       '((".*" ,(no-littering-expand-var-file-name "/auto-save/") t)))

#+end_src

* Basic UI Configuration

This section configures the basic UI settings that remove some of the elements that give Emacs a outdated look. This should make the UI more minimal and modern. 

#+begin_src emacs-lisp

  (toggle-frame-maximized)
  ;;(setq inhibit-startup-message t)

  (scroll-bar-mode -1)     ; Disable visible scrollbar
  (tool-bar-mode -1)       ; Disabel the toolbar
  (tooltip-mode -1)        ; Disabel tooltips
  (set-fringe-mode 10)     ; Give some breathing room

  (menu-bar-mode -1)       ; Disable the menu bar
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha'(90 . 50))
  (add-to-list 'default-frame-alist '(alpha . (90 . 50)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Set the directory for backup files
  (setq backup-directory-alist
        '(("." . "~/.emacs.d/file-backups")))

  ;; Highlight line mode
  (global-hl-line-mode t)

  ;; Beacon mode
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))

#+end_src
** Startup page
*** Get a nice looking image
#+begin_src emacs-lisp
(setq fancy-splash-image "~/.emacs.d/qwe_download.png")
#+end_src


# ** Font Configuration

# This configuration uses the [[https://github.com/tonsky/FiraCode][Fira Code]] font by default and the [[https://fonts.google.com/specimen/Cantarell][Cantarell]] font for the variable pitch font that we will use in the org-mode files. 

# #+begin_src emacs-lisp
  
#     (set-face-attribute 'default nil :font "Fira Code Retina" :height d13353/default-font-size)
  
#     ;; Set the fixed pitch face
#     (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height d13353/default-font-size)
  
#     ;; Set the variable pitch face
#     (set-face-attribute 'variable-pitch nil :font "Cantarell" :height d13353/default-variable-font-size :weight 'regular)
  
# #+end_src

** Icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :ensure t
    :init)

  (use-package all-the-icons-ibuffer
    :ensure t
    :init (all-the-icons-ibuffer-mode 1))

#+end_src 

* UI Configuration 

** WhiteSpace
For some languages, it might be usefull to see the whitespace clearly. YAML files for example make a difference between spaces and tabs. To clearly see what has been used, we can use the command =whitespace-mode= which is bound to =C-x w=.
#+begin_src emacs-lisp

  (global-set-key (kbd "C-x w") 'whitespace-mode)

#+end_src
** Color Theme

A nice theme makes Emacs a whole lot nicer to use. I currently use a set of themes that is provided from [[https://github.com/hlissner/emacs-doom-themes][Doom Themes]].To quickly load themes to try them out, you can run =M-x counsel-load-theme=.

#+begin_src emacs-lisp
  
  ;; (use-package doom-themes
  ;;   :init (load-theme 'doom-acario-dark t))
(load-theme 'manoj-dark)
  
#+end_src

I want to create my own custom theme to fit within the theme of evangelion. For this I use the packae =autothemer=.

#+begin_src emacs-lisp

;; (use-package autothemer
;;   :ensure t)

#+end_src

#+RESULTS:
: hallo-theme

** Better modeline

Doom modeline is a nice and minimal mode line configuration for Emacs. The default configuration is qutie good, but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

~REMARK:~ You must run ~(all-the-icons-install-fonts)~ one time after installing this package. 

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-buffer-file-name-style 'file-name))

  (defun doom-modeline-conditional-buffer-encoding ()
    "We expext the encoding to be LF UTF-8, so only show the modeline when this is not the case"
    (setq-local doom-modeline-buffer-encoding
                (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                              '(coding-category-undecided coding-category-utf-8))
                                   (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                  t)))

  (add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+end_src

** Which Key

Which-key is a usefull UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. This is very usefull for learning the possible key bindings in the mode of you current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)
    (which-key-mode))

#+end_src
   
** Ivy and Counsel

Ivy is an excellent completion framework for Emacs. It provides a minimal yet powerful section meny that appears when you open files, swich buffers, and for many other tasks in Emacs. Counsel is a customized set of commads to replace =find-file= with =counsel-find-file=, etc.

Ivy-rich adds extra columns to a few of the Counsel commands to provide more information about each item.


#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; Ivy Rich	
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           ("C-c k" . 'counsel-ag)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

#+end_src

** Helpful Help Command

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful information to Emacs '=describe-= command buffers. For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very usefull for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Ibuffer

We use [[https://www.emacswiki.org/emacs/IbufferMode][ ibuffer]] to list all the active buffers. This is nice, since it lets you operate on buffers much in the same way as in [[https://www.emacswiki.org/emacs/DiredMode][Dired]].

#+begin_src emacs-lisp

  (defalias 'list-buffers 'ibuffer)

#+end_src 

** Expand region

Expand region is a nice feater to select a region of text. This is done by pressing =C-==, and then pressing = to increase the default region or - to decrease. 

#+begin_src emacs-lisp

    ;; Expand region
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][Ace Window]] is a package that makes it easier to quickly switch between buffers. After pressing =C-x o= we can chose to what buffer to go by pressing one extra key.

#+begin_src emacs-lisp

  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-foreground :height 3.0)))))
      ))

  (setq aw-keys '(?a ?s ?d ?w ?e ?k ?l ?i ?o))

#+end_src

** Avy

Avy is usefull to quickly go to a section in a text.

#+begin_src emacs-lisp

  (use-package avy
    :ensure t
    :bind
    ("M-:" . avy-goto-char))

#+end_src

** Undo Tree
[[https://www.emacswiki.org/emacs/UndoTree][
Undo tree]] is a very nice package that treets ~undo~ as a history, so that we can always go back to undo undos and have a visual representation of our history.

#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

#+end_src 

* File Management

** Dired

We setup up dired, this is a nice way to acces/manage files from within emacs.

#+begin_src emacs-lisp

  (use-package dired-single)

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (define-key dired-mode-map (kbd "J") 'dired-single-up-directory)
    (define-key dired-mode-map (kbd "j") 'dired-single-buffer)
    (setq delete-by-moving-to-trash t))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (define-key dired-mode-map (kbd "H") 'dired-hide-dotfiles-mode))

#+end_src 

* Org Mode

[[https://orgmode.org/][Org mode]] is one of the best features that Emacs has to offer. It is a super rich text editor, project planner, task and time tracker, blogging engine, etc. all in one package. This is one of my favourite things in Emacs.

** Better Font Faces

The =config/org-font-setup= functions configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more lie we are editing a document in =org-mode=. This makes Org Mode indistinguishable from any SWYG text editor. For code blocks and tables, we use a fixed width fonts. This is a function that gets called to configure org-mode once org-mode is started. 

#+begin_src emacs-lisp
  
  (defun config/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  
    ;; Set face for heading levels
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
  
  
    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  
#+end_src
** Prettify symbols

Prettify symbols makes org-mode very fresh and makes it so that code blocks, results, title and other things look more minimal. It replaces things that should take much space on the screen with a simply icon. 

#+begin_src emacs-lisp

  (setq-default prettify-symbols-alist '(("#+begin_src emacs-lisp" . "")
                                         ("#+BEGIN_SRC emacs-lisp" . "")			  
                                         ("#+BEGIN_SRC" . "")
                                         ("#+END_SRC" . "")
                                         ("#+begin_src" . "")
                                         ("#+end_src" . "")
                                         ("=>"   . "⇨")
                                         ("TODO" . "")
                                         ("WATING" . "")
                                         ("DONE" . "")
                                         ("#+RESULTS:" . "")
                                         (":GitHub:" . "")
                                         ))

  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'org-mode-hook 'prettify-symbols-mode)

#+end_src 

** Basic Config

The basic config sections sets up a basic configuration for org-mode, org-agenda and org-capture.

#+begin_src emacs-lisp

  (defun config/org-mode-setup()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . config/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files
          '("~/.emacs.d/Agenda"))
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k)")))

    ;; set the refile targets
    (setq org-refile-targets
          '(("projects.org" :maxlevel . 1)))

    ;; after refile, give advice to save all the org buffers
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; org-mode available tags
    (setq org-tag-alist
          '((:startgroup)
            ;;Put mutually exlusive tags here
            (:endgroup)
            ("@errand" . ?F)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("idea" . ?i)
            ("recurring" . ?r)
            ("bugs" . ?b)
            ("new features" . ?f)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Work")
            ("tt" "Task" entry (file+olp "~/.emacs.d/Agenda/projects.org" "Projects")
             "* TODO %?         :@work:\n  %u" :empty-lines 1)

            ("tm" "Meeting" entry (file+olp "~/.emacs.d/Agenda/projects.org" "Meetings")
             "* MEETING with %? on %? :MEETING: :@work:\n %T" :empty-lines 1)

            ("ts" "Seminar" entry (file+olp "~/.emacs.d/Agenda/projects.org" "Seminar")
             "* SEMINAR on %T")

            ("ti" "Inbox" entry (file+olp "~/.emacs.d/Agenda/projects.org" "Inbox")
             "* IDEA: %?       :@work: \n" :empty-lines 1)

            ("i" "Private")
            ("it" "Task" entry (file+olp "~/.emacs.d/Agenda/projects.org" "Projects HOME")
             "* TODO %?         :@home:\n  %u" :empty-lines 1)

            ("im" "Meeting" entry (file+olp "~/.emacs.d/Agenda/projects.org" "Meetings HOME")
             "* MEETING with %? on %? :MEETING: :@home:\n %T" :empty-lines 1)

            ("ii" "Inbox" entry (file+olp "~/.emacs.d/Agenda/projects.org" "Inbox HOME")
             "* IDEA: %?       :@home: \n" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/.emacs.d/Agenda/projects.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Today todo" entry
             (file+olp+datetree "~/.emacs.d/Agenda/projects.org")
             "* TODO: %? - :today:\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/.emacs.d/Agenda/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (config/org-font-setup))

  (with-eval-after-load 'org
      (require 'calfw-org))
#+end_src

** Nicer Heading Bullets

For nices bullets in Org-Mode we use the package [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp
      
      (use-package org-superstar
        :after org
        :hook (org-mode . (lambda () (org-superstar-mode 1)))
        :config
        (setq org-superstar-remove-leading-stars t))
      
#+end_src

** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= for a more pleasant writing experience as it centers the contents of the buffer horizontally to seem more like you are edding a document that is alligned. 

#+begin_src emacs-lisp
  
  ;; To center text on screen and have a text width of 100 caracters
  (defun config/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  
  (use-package visual-fill-column
    :hook (org-mode . config/org-mode-visual-fill))
  
#+end_src

** Configure Babel Languages

To execute and export code blocks in =org-mode=, we need to set up =org-babel-load-language= for each language we want to use. The available languages can be found [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (eshell . t)
       (makefile . t)
       (shell . t)
       (C . t)))
    (setq org-src-preserve-indentation t)
    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quicly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name (like =el=, =sh=, =py=) and then pressing =TAB=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; Structure Templates
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto-tangle Configuration Files

This piece of code add a hook to =org-mode= buffers so that =config/org-babel-tangle-config= gets executed each time such a buffer gets saved. This function that an org-file that should generated a configuration file does this after every save. Because of this hook we don't need to manually tangle every time we change the =.org= file.

#+begin_src emacs-lisp
  
  ;; Automatically tangle our Emacs.org config file when save it
  (defun config/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/Configuration/"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'config/org-babel-tangle-config)))
  
#+end_src

* Org Roam

I am still learning Org-Roam. This defenitly looks usefull. 
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamFiles")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"   . completion-at-point))
    :config
    (org-roam-setup))

(setq org-roam-v2-ack t)
#+end_src
* Development
** Languages
*** CMake
#+begin_src emacs-lisp

  ;; optional, must have rtags installed
  (require 'rtags) 
  (cmake-ide-setup)

#+end_src
*** IDE Features with lsp-mode
**** lsp-mode
We use the excellend [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] package to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. To know how to set up a particular language in =lsp-mode=, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]].

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybings will be added. You can find out what is possible with =lsp-mode= using =C-c l= and =which-key=.
!! CHECK HOW TO MAKE THIS BETTER
#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (message "lsp mode loaded")
    (lsp-enable-which-key-integration t))

 #+end_src
*** Python
To use lsp for python scripts, we need to install language server that =lsp-mode= can use. In this system I use Microsoft's [[https://github.com/Microsoft/python-language-server][python language server]].

!! WE SHOULD CHECK THIS 
#+begin_src emacs-lisp

  ;; (use-package lsp-python-ms
  ;;   :ensure t
  ;;   :init (setq lsp-python-ms-auto-install-server t)
  ;;   :hook (python-mode . (lambda ()
  ;;                           (require 'lsp-python-ms)
  ;;                            (lsp)))
  ;;   :config
  ;;   (message "LSP ptyon ms"))

 #+end_src
# *** C++
# Installing a C++ server for lsp seems to be a bit more diffucult then was the case for Python. For our system we install the [[https://github.com/MaskRay/ccls/wiki][ccls]] server. We will try to build this package from source.
# **** Building
# To build the package from source, we will need:
# - [[https://cmake.org/][CMake]] (>=3.8)
# #+begin_src eshell :results output :exports both :eval yes
# cmake --version
# #+end_src

# #+RESULTS:
# : cmake version 3.21.3
# : 
# : CMake suite maintained and supported by Kitware (kitware.com/cmake).
# - C++ compiler with C++17 support:
#   - =Clang= >=5
#   - =GNU GCC= >=7.2
# #+begin_src eshell :results output :exports both :eval yes
# git clone --depth=1 --recursive https://github.com/MaskRay/ccls
# cd ccls

# # Download "Pre-Built Binaries" from https://releases.llvm.org/download.html
# # and unpack to /path/to/clang+llvm-xxx.
# # Do not unpack to a temporary directory, as the clang resource directory is hard-coded
# # into ccls at compile time!
# # See https://github.com/MaskRay/ccls/wiki/FAQ#verify-the-clang-resource-directory-is-correct
# cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/path/to/clang+llvm-xxx
# cmake --build Release

# #+end_src
# ****  Use the package
# #+begin_src emacs-lisp
  
#   (use-package ccls
#     :hook ((c-mode c++-mode objc-moe cuda-mode) .
#            (lambda () (require 'ccls) (lsp))))
  
# #+end_src
** Projectile

[[https://projectile.mx/][Projectile]] is a project integration library for Emacs. This makes it a lot easyer to navigate around a code project for different languages. Many packages make use of projectile, so it is usefull to have it even when it is not used.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Documents/Code")
      (setq projectile-project-search-path '("~/Documents/Code")))
    (setq projectile-switch-project-action 'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Terminal
I like to use the [[https://github.com/akermu/emacs-libvterm][Vterm]] package as a terminal emulator in Emacs. This terminal emulator fast and behaves like the standard gnome terminal.

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (message "LOADED VTERM"))
#+end_src
** Magit

[[https://magit.vc/][Magit]] is a very nice Git interface. It executes common Git operations using its command panel system. 

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :init
    (progn
      (bind-key "C-x g" 'magit-status))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Rainbow Delimeters

[[https://github.com/Fanael/rainbow-delimiters][Rainbow Delimeters]] is very usefull for programing (espescially elisp) since it colorizes nested parentheses adn brackets accoording to their nesting depth. It is much easier to visualize matching paraentheses this way.

#+begin_src emacs-lisp
  
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

** PDF Tools
We use this package to open PDF in emacs.
#+begin_src emacs-lisp

  ;; (use-package pdf-tools
  ;;   :config
  ;;   (pdf-loader-install))

#+end_src

#+begin_src
NEED AUTORECONF
#+end_src




















* Email

We use the =mu4e= package to acces our email in macs. In order to sync our local system with the email server, we use the program =isync=. In the folowing section we write out the configuration file
#+begin_src shell :tangle ~/.mbsyncrc :mkdirp yes 
# imap account information
IMAPAccount gmail
Host imap.gmail.com
User example@gmail.com
Pass PutYourPasswordHere
AuthMechs LOGIN
SSLType IMAPS
CertificateFile /usr/local/etc/openssl/cert.pem

# remote storage (use the imap account specified above)
IMAPStore gmail-remote
Account gmail

# local storage
MaildirStore gmail-local
Path ~/.mail/
Inbox ~/.mail/Inbox
Subfolders Verbatim

# channel to remote storage
Channel gmail
Far :gmail-remote:
Near :gmail-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Bin"
Create Both
SyncState *
#+end_src
